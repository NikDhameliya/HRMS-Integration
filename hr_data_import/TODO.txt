1. Implement Start / stop functionality
2. Implement live logs (if possible)
3. Check skills table 
4. Build all 3 records api


# import requests
# from odoo import models, api

# class HREmployeeImport(models.Model):
#     _inherit = 'hr.employee'

#     @api.model
#     def import_employee_data(self):
#         # Replace this with your actual API endpoint and API key
#         api_url = "https://api.example.com/employees"
#         headers = {
#             'Authorization': 'Bearer your_api_key_here'
#         }
        
#         response = requests.get(api_url, headers=headers)
#         if response.status_code == 200:
#             employees_data = response.json().get('data', [])
#             for employee_data in employees_data:
#                 self._create_or_update_employee(employee_data)

#     def _create_or_update_employee(self, data):
#         employee = self.search([('api_id', '=', data['id'])], limit=1)
#         values = {
#             'api_id': data['id'],
#             'name': data['name'],
#             'email': data['email'],
#             'position': data['position'],
#             'grade': data['grade'],
#             'residence': data['residence'],
#             'residence_comment': data['residence_comment'],
#             'country': data['country'],
#             'city': data['city'],
#             'phone': data['phone'],
#             'skype': data['skype'],
#             'linked_in': data['linked_in'],
#             'telegram': data['telegram'],
#             'birth_date': data['birth_date'],
#             'end_test': data['end_test'],
#             'fired_date': data['fired_date'],
#             'start_date': data['start_date'],
#             'gender': data['gender'],
#             'additional_email': data['additional_email'],
#             'additional_phone': data['additional_phone'],
#             'relocate': data['relocate'],
#             'duties': data['duties'],
#             'description': data['description'],
#             'additional_info': data['additional_info'],
#             'languages': ', '.join(data.get('languages', [])),
#             'educations': ', '.join(data.get('educations', [])),
#             'skills': ', '.join(data.get('skills', [])),
#             'awards': ', '.join(data.get('awards', [])),
#         }

#         if employee:
#             employee.write(values)
#         else:
#             employee = self.create(values)

#         # Create or update teams
#         employee.team_ids = [(5, 0, 0)]
#         for team in data.get('team', []):
#             self.env['hr.team'].create({
#                 'name': team['name'],
#                 'employee_id': employee.id
#             })

#         # Create or update career
#         employee.career_ids = [(5, 0, 0)]
#         for career in data.get('career', []):
#             self.env['hr.career'].create({
#                 'start_date': career['start_date'],
#                 'end_date': career['end_date'],
#                 'test_period_start_date': career['test_period_start_date'],
#                 'test_period_end_date': career['test_period_end_date'],
#                 'company_name': career['company_name'],
#                 'department': career['department'],
#                 'position': career['position'],
#                 'grade': career['grade'],
#                 'place': career['place'],
#                 'team': career['team'],
#                 'comment': career['comment'],
#                 'employee_id': employee.id
#             })

#         # Create or update contacts
#         employee.contact_ids = [(5, 0, 0)]
#         for contact in data.get('contacts', []):
#             self.env['hr.contact'].create({
#                 'type_id': contact['type_id'],
#                 'type_name': contact['type_name'],
#                 'value': contact['value'],
#                 'employee_id': employee.id
#             })
